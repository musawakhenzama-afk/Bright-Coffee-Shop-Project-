-- Revenue per transaction 
SELECT transaction_id,
       transaction_qty*unit_price AS revenue
FROM  "SALES"."PUBLIC"."BRIGHTCOFFEESHOP";

-- Remember that with the ID's we use the COUNT NOT SUM 
-- This is the total number of sales/transactions made
SELECT COUNT(transaction_id) AS number_of_transactions
FROM  "SALES"."PUBLIC"."BRIGHTCOFFEESHOP";

--COUNT the number of different shops we have in this data 
SELECT COUNT(DISTINCT store_id) AS number_of_shops
FROM  "SALES"."PUBLIC"."BRIGHTCOFFEESHOP";

-- To show us the name of the different store location which is actually 3 different shops
SELECT DISTINCT store_location, store_id
FROM  "SALES"."PUBLIC"."BRIGHTCOFFEESHOP";

--How to calculate the revenue by store location 
SELECT store_location,
       SUM(transaction_qty*unit_price) AS revenue
FROM  "SALES"."PUBLIC"."BRIGHTCOFFEESHOP"
GROUP BY store_location;

-- What time does the shop opens
SELECT MIN(transaction_time) openig_time
FROM  "SALES"."PUBLIC"."BRIGHTCOFFEESHOP";

-- What time does the shop close
SELECT MAX(transaction_time) closing_time
FROM  "SALES"."PUBLIC"."BRIGHTCOFFEESHOP";


SELECT product_category,
       SUM(transaction_qty*unit_price) AS revenue,
       store_location,
       transaction_date,
       transaction_time,
       CASE
            WHEN transaction_time BETWEEN '06:00:00' AND '11:59:59' THEN '01. Morning'
            WHEN transaction_time BETWEEN '12:00:00' AND '15:59:59' THEN '02. Aftenoon'
            WHEN transaction_time BETWEEN '16:00:00' AND '19:59:59' THEN '03. Evening'
            WHEN transaction_time >= '20:00:00'  THEN '04. Night'
        END AS time_bucket
FROM  "SALES"."PUBLIC"."BRIGHTCOFFEESHOP"
WHERE transaction_date>'2023-05-01'
GROUP BY product_category,
         store_location,
         transaction_date,
         time_bucket,
         transaction_time
ORDER BY revenue DESC;

SELECT 
    product_category,
    product_id,
    transaction_date,
    SUM(transaction_qty) AS rate_of_sale -- total units sold that day
FROM "SALES"."PUBLIC"."BRIGHTCOFFEESHOP"
GROUP BY product_category, product_id, transaction_date
ORDER BY product_category, transaction_date;

SELECT 
    product_category,
    product_id,
    AVG(daily_sales) AS avg_rate_of_sale_per_day
FROM (
    SELECT 
        product_category,
        product_id,
        transaction_date,
        SUM(transaction_qty) AS daily_sales
    FROM "SALES"."PUBLIC"."BRIGHTCOFFEESHOP"
    GROUP BY product_category, product_id, transaction_date
) AS daily
GROUP BY product_category, product_id
ORDER BY avg_rate_of_sale_per_day DESC;
  
WITH daily_sales AS (
    SELECT 
        product_category,
        product_id,
        store_location,
        transaction_date,
        CASE
            WHEN transaction_time BETWEEN '06:00:00' AND '11:59:59' THEN '01. Morning'
            WHEN transaction_time BETWEEN '12:00:00' AND '15:59:59' THEN '02. Afternoon'
            WHEN transaction_time BETWEEN '16:00:00' AND '19:59:59' THEN '03. Evening'
            WHEN transaction_time >= '20:00:00'  THEN '04. Night'
        END AS time_bucket,
        SUM(transaction_qty) AS rate_of_sale,                          -- RoS (units sold per product/day/bucket)
        SUM(transaction_qty * unit_price) AS revenue                   -- daily revenue
    FROM "SALES"."PUBLIC"."BRIGHTCOFFEESHOP"
    WHERE transaction_date > '2023-05-01'
    GROUP BY product_category, product_id, store_location, transaction_date, time_bucket
)

SELECT 
    product_category,
    product_id,
    store_location,
    time_bucket,
    AVG(rate_of_sale) AS avg_rate_of_sale_per_day,                     -- Avg RoS per product per day
    SUM(rate_of_sale) AS total_units_sold,                             -- Total units sold in the period
    SUM(revenue) AS total_revenue
FROM daily_sales
GROUP BY product_category, product_id, store_location, time_bucket
ORDER BY total_revenue DESC;

WITH daily_sales AS (
    SELECT 
        product_category,
        product_id,
        store_location,
        transaction_date,
        CASE
            WHEN transaction_time BETWEEN '06:00:00' AND '11:59:59' THEN '01. Morning'
            WHEN transaction_time BETWEEN '12:00:00' AND '15:59:59' THEN '02. Afternoon'
            WHEN transaction_time BETWEEN '16:00:00' AND '19:59:59' THEN '03. Evening'
            WHEN transaction_time >= '20:00:00'  THEN '04. Night'
        END AS time_bucket,
        SUM(transaction_qty) AS rate_of_sale,               -- Units sold per product/day/bucket
        SUM(transaction_qty * unit_price) AS daily_revenue  -- Revenue per product/day/bucket
    FROM "SALES"."PUBLIC"."BRIGHTCOFFEESHOP"
    WHERE transaction_date > '2023-05-01'
    GROUP BY product_category, product_id, store_location, transaction_date, time_bucket
)

SELECT 
    product_category,
    product_id,
    store_location,
    time_bucket,
    AVG(rate_of_sale) AS avg_rate_of_sale_per_day,          -- Avg daily units sold
    SUM(rate_of_sale) AS total_units_sold,                  -- Total units sold
    AVG(daily_revenue) AS avg_revenue_per_day,              -- Avg daily revenue
    SUM(daily_revenue) AS total_revenue                     -- Total revenue
FROM daily_sales
GROUP BY product_category, product_id, store_location, time_bucket
ORDER BY total_revenue DESC;

WITH monthly_sales AS (
    SELECT
        DATE_TRUNC('month', transaction_date) AS month,
        SUM(transaction_qty * unit_price) AS total_revenue
    FROM "SALES"."PUBLIC"."BRIGHTCOFFEESHOP"
    GROUP BY DATE_TRUNC('month', transaction_date)
),
growth_calc AS (
    SELECT
        month,
        total_revenue,
        LAG(total_revenue) OVER (ORDER BY month) AS prev_month_revenue,
        CASE 
            WHEN LAG(total_revenue) OVER (ORDER BY month) IS NULL THEN NULL
            ELSE ROUND(
                ((total_revenue - LAG(total_revenue) OVER (ORDER BY month)) 
                / LAG(total_revenue) OVER (ORDER BY month)) * 100, 2
            )
        END AS mom_growth_percent
    FROM monthly_sales
)
SELECT
    month,
    total_revenue,
    prev_month_revenue,
    mom_growth_percent,
    CASE 
        WHEN mom_growth_percent IS NULL THEN 'No Previous Month'
        WHEN mom_growth_percent > 0 THEN '▲ Positive Growth'
        WHEN mom_growth_percent < 0 THEN '▼ Negative Growth'
        ELSE 'No Change'
    END AS growth_indicator
FROM growth_calc
ORDER BY month;
